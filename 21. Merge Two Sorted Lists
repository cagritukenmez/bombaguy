/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* list3;
        if(list1 == nullptr) return list2;
        else if(list2 == nullptr) return list1;
        ListNode* itr1;
        ListNode* itr2;
        ListNode* itr3;
        if(list1->val == list2->val){
                itr1 = list1;
                list1 = list1->next;
                itr2 = list2;
                list2 = list2->next;
                list3 = itr1;
                itr1->next = itr2;
                itr2->next = nullptr;
                itr3 = itr2;
            }
        else if(list1->val < list2->val){
                itr1 = list1;
                list1 = list1->next;
                list3 = itr1;
                itr1->next = nullptr;
                itr3 = itr1;
        }
        else{
                itr2 = list2;
                list2 = list2->next;
                list3 = itr2;
                itr2->next = nullptr;
                itr3 = itr2;
        }
        while(!(list1 == nullptr or list2 == nullptr)){
            if(list1->val == list2->val){
                itr1 = list1;
                list1 = list1->next;
                itr2 = list2;
                list2 = list2->next;
                itr3->next = itr1;
                itr1->next = itr2;
                itr2->next = nullptr;
                itr3 = itr2;
            }
            else if(list1->val < list2->val){
                itr1 = list1;
                list1 = list1->next;
                itr3->next = itr1;
                itr1->next = nullptr;
                itr3 = itr1;
            }
            else{
                itr2 = list2;
                list2 = list2->next;
                itr3->next = itr2;
                itr2->next = nullptr;
                itr3 = itr2;
            }
        }
        if(list1 == nullptr){
            itr3->next = list2;
        }
        else{
            itr3->next = list1;
        }
        return list3;
    }
};
